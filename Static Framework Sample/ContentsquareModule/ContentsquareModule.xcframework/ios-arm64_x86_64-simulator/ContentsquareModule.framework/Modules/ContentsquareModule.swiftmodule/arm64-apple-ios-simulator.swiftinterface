// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ContentsquareModule
import CoreGraphics
import CoreTelephony
import CryptoKit
import Darwin
import Dispatch
import Foundation
import Foundation/*.Bundle*/
import MapKit
import Network
import SafariServices
import Swift
import SystemConfiguration
import UIKit
import WebKit
import os.log
import os
import zlib
public struct Log {
  public enum Level : Swift.Int, Swift.Comparable {
    case verbose
    case info
    case error
    case important
    public static func < (lhs: ContentsquareModule.Log.Level, rhs: ContentsquareModule.Log.Level) -> Swift.Bool
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
@objc public enum Currency : Swift.Int, Swift.CaseIterable, Swift.Codable {
  case aed = 784
  case afn = 971
  case all = 8
  case amd = 51
  case ang = 532
  case aoa = 973
  case ars = 32
  case aud = 36
  case awg = 533
  case azn = 944
  case bam = 977
  case bbd = 52
  case bdt = 50
  case bgn = 975
  case bhd = 48
  case bif = 108
  case bmd = 60
  case bnd = 96
  case bob = 68
  case bov = 984
  case brl = 986
  case bsd = 44
  case btn = 64
  case bwp = 72
  case byn = 933
  case bzd = 84
  case cad = 124
  case cdf = 976
  case che = 947
  case chf = 756
  case chw = 948
  case clf = 990
  case clp = 152
  case cny = 156
  case cop = 170
  case cou = 970
  case crc = 188
  case cuc = 931
  case cup = 192
  case cve = 132
  case czk = 203
  case djf = 262
  case dkk = 208
  case dop = 214
  case dzd = 12
  case egp = 818
  case ern = 232
  case etb = 230
  case eur = 978
  case fjd = 242
  case fkp = 238
  case gbp = 826
  case gel = 981
  case ghs = 936
  case gip = 292
  case gmd = 270
  case gnf = 324
  case gtq = 320
  case gyd = 328
  case hkd = 344
  case hnl = 340
  case hrk = 191
  case htg = 332
  case huf = 348
  case idr = 360
  case ils = 376
  case inr = 356
  case iqd = 368
  case irr = 364
  case isk = 352
  case jmd = 388
  case jod = 400
  case jpy = 392
  case kes = 404
  case kgs = 417
  case khr = 116
  case kmf = 174
  case kpw = 408
  case krw = 410
  case kwd = 414
  case kyd = 136
  case kzt = 398
  case lak = 418
  case lbp = 422
  case lkr = 144
  case lrd = 430
  case lsl = 426
  case lyd = 434
  case mad = 504
  case mdl = 498
  case mga = 969
  case mkd = 807
  case mmk = 104
  case mnt = 496
  case mop = 446
  case mru = 929
  case mur = 480
  case mvr = 462
  case mwk = 454
  case mxn = 484
  case mxv = 979
  case myr = 458
  case mzn = 943
  case nad = 516
  case ngn = 566
  case nio = 558
  case nok = 578
  case npr = 524
  case nzd = 554
  case omr = 512
  case pab = 590
  case pen = 604
  case pgk = 598
  case php = 608
  case pkr = 586
  case pln = 985
  case pyg = 600
  case qar = 634
  case ron = 946
  case rsd = 941
  case rub = 643
  case rwf = 646
  case sar = 682
  case sbd = 90
  case scr = 690
  case sdg = 938
  case sek = 752
  case sgd = 702
  case shp = 654
  case sll = 694
  case sos = 706
  case srd = 968
  case ssp = 728
  case stn = 930
  case svc = 222
  case syp = 760
  case szl = 748
  case thb = 764
  case tjs = 972
  case tmt = 934
  case tnd = 788
  case top = 776
  case `try` = 949
  case ttd = 780
  case twd = 901
  case tzs = 834
  case uah = 980
  case ugx = 800
  case usd = 840
  case usn = 997
  case uyi = 940
  case uyu = 858
  case uyw = 927
  case uzs = 860
  case ves = 928
  case vnd = 704
  case vuv = 548
  case wst = 882
  case xaf = 950
  case xag = 961
  case xau = 959
  case xba = 955
  case xbb = 956
  case xbc = 957
  case xbd = 958
  case xcd = 951
  case xdr = 960
  case xof = 952
  case xpd = 964
  case xpf = 953
  case xpt = 962
  case xsu = 994
  case xts = 963
  case xua = 965
  case xxx = 999
  case yer = 886
  case zar = 710
  case zmw = 967
  case zwl = 932
  case unknown = -1
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [ContentsquareModule.Currency]
  public typealias RawValue = Swift.Int
  public static var allCases: [ContentsquareModule.Currency] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension URL : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.StaticString)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.StaticString
  public typealias StringLiteralType = Swift.StaticString
  public typealias UnicodeScalarLiteralType = Swift.StaticString
}
public struct CompressionLevel : Swift.RawRepresentable {
  public let rawValue: Swift.Int32
  public static let noCompression: ContentsquareModule.CompressionLevel
  public static let bestSpeed: ContentsquareModule.CompressionLevel
  public static let bestCompression: ContentsquareModule.CompressionLevel
  public static let defaultCompression: ContentsquareModule.CompressionLevel
  public init(rawValue: Swift.Int32)
  public init(_ rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
}
public struct GzipError : Swift.Error {
  public enum Kind : Swift.Equatable {
    case stream
    case data
    case memory
    case buffer
    case version
    case unknown(code: Swift.Int)
    public static func == (a: ContentsquareModule.GzipError.Kind, b: ContentsquareModule.GzipError.Kind) -> Swift.Bool
  }
  public let kind: ContentsquareModule.GzipError.Kind
  public let message: Swift.String
  public var localizedDescription: Swift.String {
    get
  }
}
extension Data {
  public var isGzipped: Swift.Bool {
    get
  }
  public func gzipped(level: ContentsquareModule.CompressionLevel = .defaultCompression) throws -> Foundation.Data
  public func gunzipped() throws -> Foundation.Data
}
extension NSTextAlignment : Swift.Codable {
}
@objc public class CustomerTransaction : ObjectiveC.NSObject {
  @objc public init(id: Swift.String?, value: Swift.Float, currency: ContentsquareModule.Currency)
  @objc(initWithId:value:stringCurrency:) public init(id: Swift.String?, value: Swift.Float, currency: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class DynamicVar : ObjectiveC.NSObject {
  @objc(initWithKey:stringValue:) public init(key: Swift.String, value: Swift.String)
  @objc(initWithKey:intValue:) public init(key: Swift.String, value: Swift.UInt32)
  @objc override dynamic public init()
  @objc deinit
}
infix operator ==> : MultiplicationPrecedence
infix operator --> : AdditionPrecedence
@objc @_inheritsConvenienceInitializers public class Contentsquare : ObjectiveC.NSObject {
  @objc public static func start()
  @objc public static func stopTracking()
  @objc public static func resumeTracking()
  @objc public static func optIn()
  @objc public static func optOut()
  @objc public static func forgetMe()
  @objc public static var userID: Swift.String? {
    @objc get
  }
  @objc public static func send(transaction: ContentsquareModule.CustomerTransaction)
  @objc public static func send(screenViewWithName name: Swift.String)
  @objc public static func send(dynamicVar: ContentsquareModule.DynamicVar)
  @objc public static var csInApp: Swift.Bool {
    @objc get
    @objc set
  }
  public static var logLevel: ContentsquareModule.Log.Level {
    get
    set
  }
  @objc public static var isGestureTrackingDisabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public static func register(webView: WebKit.WKWebView)
  @objc public static func unregister(webView: WebKit.WKWebView)
  @objc public static func handle(url: Foundation.URL)
  @objc public static func mask(view: UIKit.UIView)
  @objc public static func unmask(view: UIKit.UIView)
  @objc public static func mask(viewsOfType: UIKit.UIView.Type)
  @objc public static func unmask(viewsOfType: UIKit.UIView.Type)
  @objc public static var currentSessionReplayLink: Foundation.URL? {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public class CustomScreenView : ObjectiveC.NSObject {
  public init(title: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
extension ContentsquareModule.Log.Level : Swift.Hashable {}
extension ContentsquareModule.Log.Level : Swift.RawRepresentable {}
extension ContentsquareModule.Currency : Swift.Equatable {}
extension ContentsquareModule.Currency : Swift.Hashable {}
extension ContentsquareModule.Currency : Swift.RawRepresentable {}
