// Generated by Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
#ifndef CONTENTSQUAREMODULE_SWIFT_H
#define CONTENTSQUAREMODULE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ContentsquareModule",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif







@class NSString;
@class CustomerTransaction;
@class DynamicVar;
@class NSNumber;
@class WKWebView;
@class NSURL;
@class UIView;

/// A class exposing Contentsquare SDK’s API through its static members.
SWIFT_CLASS("_TtC19ContentsquareModule13Contentsquare")
@interface Contentsquare : NSObject
/// Starts the Contentsquare SDK immediately.
/// By default, you don’t need to call this method, the SDK automatically starts.
/// Call <code>start()</code> <em>only</em>
/// <a href="https://docs.contentsquare.com/ios/#start-the-sdk">if you have disabled autostart in the plist.</a>
/// In order to capture a user’s whole session, the SDK should be started in the
/// <code>application:didFinishLaunchingWithOptions:</code> of your <code>UIApplicationDelegate</code>.
/// This will avoid losing automatically tracked events like gestures or crashes.
+ (void)start;
/// Stops any further tracking for the current runtime.
/// Call this method if you need to pause tracking on some particularly sensitive part of your app. You can resume
/// tracking at any point by calling <code>resumeTracking</code>. Tracking will also resume on next app launch.
+ (void)stopTracking;
/// Resumes tracking.
/// Call this method when you want to resume tracking after having called <code>stopTracking</code>.
+ (void)resumeTracking;
/// Opts the current user’s device into being tracked.
/// When this method is called tracking starts immediately.
/// note:
/// All users are opted in by default unless you configured Contentsquare’s SDK with the opt out by default
/// setting.
+ (void)optIn;
/// Opts the current user’s device out from being tracked.
/// Immediately stops tracking the current device. The device will never be tracked again, unless the app is
/// reinstalled, or you call the <code>optIn</code> method. In such case, the user will be tracked with a new user id and
/// won’t be linked to any previous activity.
+ (void)optOut;
/// Stops tracking current runtime and wipes user data.
/// Any future tracked activity from the current user will have a new user id, and won’t be linked to any past
/// activity from this user. Tracking will resume on next app launch.
+ (void)forgetMe;
/// The anonymous id used by Contentsquare’s SDK to track the current user.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable userID;)
+ (NSString * _Nullable)userID SWIFT_WARN_UNUSED_RESULT;
/// Tracks the given transaction.
/// Use this method to track purchases made by a user.
/// \param transaction Create a <code>CustomerTransaction</code> with a value, a currency and an optional id
/// and send it using this method.
///
+ (void)sendWithTransaction:(CustomerTransaction * _Nonnull)transaction;
/// Tracks a screen view with the given name.
/// You should use this method to track every screen viewed by a user.
/// <h1>See also</h1>
/// <a href="https://docs.contentsquare.com/ios/#track-screens">Screen views in developer documentation</a>
/// \param name The name of the screenView to track.
///
+ (void)sendWithScreenViewWithName:(NSString * _Nonnull)name;
/// Tracks a dynamic var.
/// \param dynamicVar a <code>DynamicVar</code> contains a pair of arbitrary key/value to be sent using this method.
///
+ (void)sendWithDynamicVar:(DynamicVar * _Nonnull)dynamicVar;
/// Allows to start and stop programmatically the CS in-app debug feature disregarding incoming URLs.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL csInApp;)
+ (BOOL)csInApp SWIFT_WARN_UNUSED_RESULT;
+ (void)setCsInApp:(BOOL)newValue;
/// Disables the tracking of gestures within your app.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isGestureTrackingDisabled;)
+ (BOOL)isGestureTrackingDisabled SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsGestureTrackingDisabled:(BOOL)value;
/// Starts tracking the given web view.
+ (void)registerWithWebView:(WKWebView * _Nonnull)webView;
/// Stops tracking the given web view.
+ (void)unregisterWithWebView:(WKWebView * _Nonnull)webView;
/// Allows the Contentsquare SDK to monitor CS in-app activation through a custom URL scheme.
/// This method must be called in the <code>application:openURL:options:</code> of your <code>UIApplicationDelegate</code>.
/// This method has no return value because it won’t affect the lifecycle of your application, you can return true
/// or false depending of your other need for handling URLs.
/// \param url the URL object used by the OS to open the app.
///
+ (void)handleWithUrl:(NSURL * _Nonnull)url;
/// Masks a specific view and its subviews during session recording
+ (void)maskWithView:(UIView * _Nonnull)view;
/// Unmasks a specific view during session recording
+ (void)unmaskWithView:(UIView * _Nonnull)view;
/// Masks all instances of a UIView subclass during session recording,
/// except the ones explicitly unmasked with unmask(view: UIView)
+ (void)maskWithViewsOfType:(SWIFT_METATYPE(UIView) _Nonnull)viewsOfType;
/// Unmasks all instances of a UIView subclass during session recording,
/// except the ones explicitly masked with mask(view: UIView)
+ (void)unmaskWithViewsOfType:(SWIFT_METATYPE(UIView) _Nonnull)viewsOfType;
/// Returns an URL allowing to visualize the current Session Replay
/// on the CS platform (unless no session is being recorded).
/// Session Replay is enabled depending of your project settings, opt-in status and device capabilities.
/// <h1>See also</h1>
/// <a href="https://docs.contentsquare.com/mobile-sdk-session-replay/#access-the-replay">Access the Replay</a>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nullable currentSessionReplayLink;)
+ (NSURL * _Nullable)currentSessionReplayLink SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// An ISO 4217 currency, represented by its standard int value.
typedef SWIFT_ENUM(NSInteger, Currency, open) {
  CurrencyAed = 784,
  CurrencyAfn = 971,
  CurrencyAll = 8,
  CurrencyAmd = 51,
  CurrencyAng = 532,
  CurrencyAoa = 973,
  CurrencyArs = 32,
  CurrencyAud = 36,
  CurrencyAwg = 533,
  CurrencyAzn = 944,
  CurrencyBam = 977,
  CurrencyBbd = 52,
  CurrencyBdt = 50,
  CurrencyBgn = 975,
  CurrencyBhd = 48,
  CurrencyBif = 108,
  CurrencyBmd = 60,
  CurrencyBnd = 96,
  CurrencyBob = 68,
  CurrencyBov = 984,
  CurrencyBrl = 986,
  CurrencyBsd = 44,
  CurrencyBtn = 64,
  CurrencyBwp = 72,
  CurrencyByn = 933,
  CurrencyBzd = 84,
  CurrencyCad = 124,
  CurrencyCdf = 976,
  CurrencyChe = 947,
  CurrencyChf = 756,
  CurrencyChw = 948,
  CurrencyClf = 990,
  CurrencyClp = 152,
  CurrencyCny = 156,
  CurrencyCop = 170,
  CurrencyCou = 970,
  CurrencyCrc = 188,
  CurrencyCuc = 931,
  CurrencyCup = 192,
  CurrencyCve = 132,
  CurrencyCzk = 203,
  CurrencyDjf = 262,
  CurrencyDkk = 208,
  CurrencyDop = 214,
  CurrencyDzd = 12,
  CurrencyEgp = 818,
  CurrencyErn = 232,
  CurrencyEtb = 230,
  CurrencyEur = 978,
  CurrencyFjd = 242,
  CurrencyFkp = 238,
  CurrencyGbp = 826,
  CurrencyGel = 981,
  CurrencyGhs = 936,
  CurrencyGip = 292,
  CurrencyGmd = 270,
  CurrencyGnf = 324,
  CurrencyGtq = 320,
  CurrencyGyd = 328,
  CurrencyHkd = 344,
  CurrencyHnl = 340,
  CurrencyHrk = 191,
  CurrencyHtg = 332,
  CurrencyHuf = 348,
  CurrencyIdr = 360,
  CurrencyIls = 376,
  CurrencyInr = 356,
  CurrencyIqd = 368,
  CurrencyIrr = 364,
  CurrencyIsk = 352,
  CurrencyJmd = 388,
  CurrencyJod = 400,
  CurrencyJpy = 392,
  CurrencyKes = 404,
  CurrencyKgs = 417,
  CurrencyKhr = 116,
  CurrencyKmf = 174,
  CurrencyKpw = 408,
  CurrencyKrw = 410,
  CurrencyKwd = 414,
  CurrencyKyd = 136,
  CurrencyKzt = 398,
  CurrencyLak = 418,
  CurrencyLbp = 422,
  CurrencyLkr = 144,
  CurrencyLrd = 430,
  CurrencyLsl = 426,
  CurrencyLyd = 434,
  CurrencyMad = 504,
  CurrencyMdl = 498,
  CurrencyMga = 969,
  CurrencyMkd = 807,
  CurrencyMmk = 104,
  CurrencyMnt = 496,
  CurrencyMop = 446,
  CurrencyMru = 929,
  CurrencyMur = 480,
  CurrencyMvr = 462,
  CurrencyMwk = 454,
  CurrencyMxn = 484,
  CurrencyMxv = 979,
  CurrencyMyr = 458,
  CurrencyMzn = 943,
  CurrencyNad = 516,
  CurrencyNgn = 566,
  CurrencyNio = 558,
  CurrencyNok = 578,
  CurrencyNpr = 524,
  CurrencyNzd = 554,
  CurrencyOmr = 512,
  CurrencyPab = 590,
  CurrencyPen = 604,
  CurrencyPgk = 598,
  CurrencyPhp = 608,
  CurrencyPkr = 586,
  CurrencyPln = 985,
  CurrencyPyg = 600,
  CurrencyQar = 634,
  CurrencyRon = 946,
  CurrencyRsd = 941,
  CurrencyRub = 643,
  CurrencyRwf = 646,
  CurrencySar = 682,
  CurrencySbd = 90,
  CurrencyScr = 690,
  CurrencySdg = 938,
  CurrencySek = 752,
  CurrencySgd = 702,
  CurrencyShp = 654,
  CurrencySll = 694,
  CurrencySos = 706,
  CurrencySrd = 968,
  CurrencySsp = 728,
  CurrencyStn = 930,
  CurrencySvc = 222,
  CurrencySyp = 760,
  CurrencySzl = 748,
  CurrencyThb = 764,
  CurrencyTjs = 972,
  CurrencyTmt = 934,
  CurrencyTnd = 788,
  CurrencyTop = 776,
  CurrencyTry = 949,
  CurrencyTtd = 780,
  CurrencyTwd = 901,
  CurrencyTzs = 834,
  CurrencyUah = 980,
  CurrencyUgx = 800,
  CurrencyUsd = 840,
  CurrencyUsn = 997,
  CurrencyUyi = 940,
  CurrencyUyu = 858,
  CurrencyUyw = 927,
  CurrencyUzs = 860,
  CurrencyVes = 928,
  CurrencyVnd = 704,
  CurrencyVuv = 548,
  CurrencyWst = 882,
  CurrencyXaf = 950,
  CurrencyXag = 961,
  CurrencyXau = 959,
  CurrencyXba = 955,
  CurrencyXbb = 956,
  CurrencyXbc = 957,
  CurrencyXbd = 958,
  CurrencyXcd = 951,
  CurrencyXdr = 960,
  CurrencyXof = 952,
  CurrencyXpd = 964,
  CurrencyXpf = 953,
  CurrencyXpt = 962,
  CurrencyXsu = 994,
  CurrencyXts = 963,
  CurrencyXua = 965,
  CurrencyXxx = 999,
  CurrencyYer = 886,
  CurrencyZar = 710,
  CurrencyZmw = 967,
  CurrencyZwl = 932,
  CurrencyUnknown = -1,
};


SWIFT_CLASS("_TtC19ContentsquareModule16CustomScreenView")
@interface CustomScreenView : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// A purchase made by a customer.
/// You should create a <code>CustomerTransaction</code> for each item purchased by a customer.
SWIFT_CLASS("_TtC19ContentsquareModule19CustomerTransaction")
@interface CustomerTransaction : NSObject
/// \param id An id uniquely representing the purchased item.
///
/// \param value The value of the purchased item in the given <code>currency</code>.
///
/// \param currency The currency in which the item’s <code>value</code> was given.
///
- (nonnull instancetype)initWithId:(NSString * _Nullable)id value:(float)value currency:(enum Currency)currency OBJC_DESIGNATED_INITIALIZER;
/// \param id An id uniquely representing the purchased item.
///
/// \param value The value of the purchased item in the given <code>currency</code>.
///
/// \param currency The currency in which the item’s <code>value</code> was given. This <code>String</code>’s spelling must exactly match
/// one of the <code>Currency</code> enum cases. Otherwise, the transaction will be sent with the <code>.unknown</code> currency.
///
- (nonnull instancetype)initWithId:(NSString * _Nullable)id value:(float)value stringCurrency:(NSString * _Nonnull)currency OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A key/value pair representing a variable of which you would like to analyse the variations among users or sessions.
/// Dynamic vars allow you to analyse unique aspects of your app which are not automatically tracked by Contentsquare’s
/// SDK. You will be able to analyse sessions based on which dynamic vars were tracked during a session, and with which
/// values.
SWIFT_CLASS("_TtC19ContentsquareModule10DynamicVar")
@interface DynamicVar : NSObject
/// Creates a dynamic var with the given key and string value.
/// remark:
///
/// <ul>
///   <li>
///     if <code>key</code> or <code>value</code> are empty, the framework uses the literal string ‘cs-empty’ instead.
///   </li>
///   <li>
///     if <code>key</code> is over 50 characters, the framework will automatically truncate the string.
///   </li>
///   <li>
///     if <code>value</code> is over 255 characters, the framework will automatically truncate the string.
///   </li>
/// </ul>
/// \param key A description of what you want to track. Use the same key to identify occurrences of a same var.
///
/// \param value The string value taken by this occurrence of the var.
///
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key stringValue:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
/// Creates a dynamic var with the given key and integer value.
/// remark:
///
/// <ul>
///   <li>
///     if <code>key</code> is empty, the framework uses the literal string ‘cs-empty’ instead.
///   </li>
///   <li>
///     if <code>key</code> is over 50 characters, the framework will automatically truncate the string.
///   </li>
/// </ul>
/// \param key A description of what you want to track. Use the same key to identify occurrences of a same var.
///
/// \param value The integer value taken by this occurrence of the var.
///
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key intValue:(uint32_t)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end















































#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
